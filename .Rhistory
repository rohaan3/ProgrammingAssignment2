#take the matrix as an input
makeCacheMatrix <- function(x = matrix())
{
inverseMatrix <- NULL
#set the value of the Matrix
setMatrix <- function(y) {
x <<- y
inverseMatrix <<- NULL
}
getMatrix <- function(x)                               #get the value of the Matrix
setInverse <- function(inverse) inverseMatrix <<- inverse  #set the value of the invertible matrix
getInverse <- function() inverseMatrix                     #get the value of the invertible matrix
list(setMatrix = setMatrix, getMatrix = getMatrix,
setInverse = setInverse, getInverse = getInverse)
}
cacheSolve <- function(x, ...)
{
## Return a matrix that is the inverse of 'x'
#get the value of the invertible matrix from the makeCacheMatrix function
inverseMatrix <- x$getInverse()
if(!is.null(inverseMatrix))
{                       #if inverse matrix is not NULL
message("Getting Cached Invertible Matrix")   #Type message: Getting Cached Invertible Matrix
return(inverseMatrix)                             #return the invertible matrix
}
#if value of the invertible matrix is NULL then
MatrixData <- x$getMatrix()                     #get the original Matrix Data
inverseMatrix <- solve(MatrixData, ...)             #use solve function to inverse the matrix
x$setInverse(inverseMatrix)                         #set the invertible matrix
return(inverseMatrix)                               #return the invertible matrix
}
View(cacheSolve)
View(makeCacheMatrix)
